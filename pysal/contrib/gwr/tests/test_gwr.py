"""
GWR is tested against results from GWR4
"""

import unittest
import sys
sys.path.append('/Users/toshan/dev/pysal/pysal/contrib/gwr')
sys.path.append('/Users/toshan/dev/pysal/pysal/contrib/glm')
from family import Gaussian, Poisson, Binomial
from gwr import GWR
import numpy as np
import pysal
import os

class TestGWRGaussian(unittest.TestCase):
    def setUp(self):
        os.chdir('/Users/toshan/dev/pysal/pysal/contrib/gwr/examples/georgia')
        data = pysal.open('georgia/GData_utm.csv')
        self.coords = zip(data.by_col('X'), data.by_col('Y'))
        self.y = np.array(data.by_col('PctBach')).reshape((-1,1))
        rural  = np.array(data.by_col('PctRural')).reshape((-1,1))
        pov = np.array(data.by_col('PctPov')).reshape((-1,1)) 
        black = np.array(data.by_col('PctBlack')).reshape((-1,1))
        self.X = np.hstack([rural, pov, black])
        self.BS_F = pysal.open('georgia_results/georgia_BS_F_listwise.csv')
        self.BS_NN = pysal.open('georgia_results/georgia_BS_NN_listwise.csv')
        self.GS_F = pysal.open('georgia_results/georgia_GS_F_listwise.csv')
        self.GS_NN = pysal.open('georgia_results/georgia_GS_NN_listwise.csv')

    def test_BS_F(self):
        est_Int = self.BS_F.by_col(' est_Intercept')
        se_Int = self.BS_F.by_col(' se_Intercept')
        t_Int = self.BS_F.by_col(' t_Intercept')
        est_rural = self.BS_F.by_col(' est_PctRural')
        se_rural = self.BS_F.by_col(' se_PctRural')
        t_rural = self.BS_F.by_col(' t_PctRural')
        est_pov = self.BS_F.by_col(' est_PctPov')
        se_pov = self.BS_F.by_col(' se_PctPov')
        t_pov = self.BS_F.by_col(' t_PctPov')
        est_black = self.BS_F.by_col(' est_PctBlack')
        se_black = self.BS_F.by_col(' se_PctBlack')
        t_black = self.BS_F.by_col(' t_PctBlack')
        yhat = self.BS_F.by_col(' yhat')
        res = np.array(self.BS_F.by_col(' residual')).reshape((-1,1))
        std_res = np.array(self.BS_F.by_col(' std_residual')).reshape((-1,1))
        localR2 = np.array(self.BS_F.by_col(' localR2')).reshape((-1,1))
        inf = np.array(self.BS_F.by_col(' influence')).reshape((-1,1))
        cooksD = np.array(self.BS_F.by_col(' CooksD')).reshape((-1,1))
        
        model = GWR(self.coords, self.y, self.X, bw=209267.689, fixed=True)
        rslt = model.fit()
        
        np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-04)
        np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-04)
        np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-04)
        np.testing.assert_allclose(est_rural, rslt.params[:,1], rtol=1e-04)
        np.testing.assert_allclose(se_rural, rslt.bse[:,1], rtol=1e-04)
        np.testing.assert_allclose(t_rural, rslt.tvalues[:,1], rtol=1e-04)
        np.testing.assert_allclose(est_pov, rslt.params[:,2], rtol=1e-04)
        np.testing.assert_allclose(se_pov, rslt.bse[:,2], rtol=1e-04)
        np.testing.assert_allclose(t_pov, rslt.tvalues[:,2], rtol=1e-04)
        np.testing.assert_allclose(est_black, rslt.params[:,3], rtol=1e-02)
        np.testing.assert_allclose(se_black, rslt.bse[:,3], rtol=1e-02)
        np.testing.assert_allclose(t_black, rslt.tvalues[:,3], rtol=1e-02)
        np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-05)
        np.testing.assert_allclose(res, rslt.u, rtol=1e-04)
        np.testing.assert_allclose(std_res, rslt.std_res, rtol=1e-04)
        np.testing.assert_allclose(localR2, rslt.localR2, rtol=1e-05)
        np.testing.assert_allclose(inf, rslt.influ, rtol=1e-04)
        np.testing.assert_allclose(cooksD, rslt.cooksD, rtol=1e-00)

    def test_BS_NN(self):
        est_Int = self.BS_NN.by_col(' est_Intercept')
        se_Int = self.BS_NN.by_col(' se_Intercept')
        t_Int = self.BS_NN.by_col(' t_Intercept')
        est_rural = self.BS_NN.by_col(' est_PctRural')
        se_rural = self.BS_NN.by_col(' se_PctRural')
        t_rural = self.BS_NN.by_col(' t_PctRural')
        est_pov = self.BS_NN.by_col(' est_PctPov')
        se_pov = self.BS_NN.by_col(' se_PctPov')
        t_pov = self.BS_NN.by_col(' t_PctPov')
        est_black = self.BS_NN.by_col(' est_PctBlack')
        se_black = self.BS_NN.by_col(' se_PctBlack')
        t_black = self.BS_NN.by_col(' t_PctBlack')
        yhat = self.BS_NN.by_col(' yhat')
        res = np.array(self.BS_NN.by_col(' residual')).reshape((-1,1))
        std_res = np.array(self.BS_NN.by_col(' std_residual')).reshape((-1,1))
        localR2 = np.array(self.BS_NN.by_col(' localR2')).reshape((-1,1))
        inf = np.array(self.BS_NN.by_col(' influence')).reshape((-1,1))
        cooksD = np.array(self.BS_NN.by_col(' CooksD')).reshape((-1,1))

        model = GWR(self.coords, self.y, self.X, bw=90.000, fixed=False)
        rslt = model.fit()
        
        np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-04)
        np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-04)
        np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-04)
        np.testing.assert_allclose(est_rural, rslt.params[:,1], rtol=1e-04)
        np.testing.assert_allclose(se_rural, rslt.bse[:,1], rtol=1e-04)
        np.testing.assert_allclose(t_rural, rslt.tvalues[:,1], rtol=1e-04)
        np.testing.assert_allclose(est_pov, rslt.params[:,2], rtol=1e-04)
        np.testing.assert_allclose(se_pov, rslt.bse[:,2], rtol=1e-04)
        np.testing.assert_allclose(t_pov, rslt.tvalues[:,2], rtol=1e-04)
        np.testing.assert_allclose(est_black, rslt.params[:,3], rtol=1e-02)
        np.testing.assert_allclose(se_black, rslt.bse[:,3], rtol=1e-02)
        np.testing.assert_allclose(t_black, rslt.tvalues[:,3], rtol=1e-02)
        np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-05)
        np.testing.assert_allclose(res, rslt.u, rtol=1e-04)
        np.testing.assert_allclose(std_res, rslt.std_res, rtol=1e-04)
        np.testing.assert_allclose(localR2, rslt.localR2, rtol=1e-05)
        np.testing.assert_allclose(inf, rslt.influ, rtol=1e-04)
        np.testing.assert_allclose(cooksD, rslt.cooksD, rtol=1e-00)

    def test_GS_F(self):
        est_Int = self.GS_F.by_col(' est_Intercept')
        se_Int = self.GS_F.by_col(' se_Intercept')
        t_Int = self.GS_F.by_col(' t_Intercept')
        est_rural = self.GS_F.by_col(' est_PctRural')
        se_rural = self.GS_F.by_col(' se_PctRural')
        t_rural = self.GS_F.by_col(' t_PctRural')
        est_pov = self.GS_F.by_col(' est_PctPov')
        se_pov = self.GS_F.by_col(' se_PctPov')
        t_pov = self.GS_F.by_col(' t_PctPov')
        est_black = self.GS_F.by_col(' est_PctBlack')
        se_black = self.GS_F.by_col(' se_PctBlack')
        t_black = self.GS_F.by_col(' t_PctBlack')
        yhat = self.GS_F.by_col(' yhat')
        res = np.array(self.GS_F.by_col(' residual')).reshape((-1,1))
        std_res = np.array(self.GS_F.by_col(' std_residual')).reshape((-1,1))
        localR2 = np.array(self.GS_F.by_col(' localR2')).reshape((-1,1))
        inf = np.array(self.GS_F.by_col(' influence')).reshape((-1,1))
        cooksD = np.array(self.GS_F.by_col(' CooksD')).reshape((-1,1))
        
        model = GWR(self.coords, self.y, self.X, bw=87308.298,
                kernel='gaussian', fixed=True)
        rslt = model.fit()
        
        np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-04)
        np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-04)
        np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-04)
        np.testing.assert_allclose(est_rural, rslt.params[:,1], rtol=1e-04)
        np.testing.assert_allclose(se_rural, rslt.bse[:,1], rtol=1e-04)
        np.testing.assert_allclose(t_rural, rslt.tvalues[:,1], rtol=1e-04)
        np.testing.assert_allclose(est_pov, rslt.params[:,2], rtol=1e-04)
        np.testing.assert_allclose(se_pov, rslt.bse[:,2], rtol=1e-04)
        np.testing.assert_allclose(t_pov, rslt.tvalues[:,2], rtol=1e-04)
        np.testing.assert_allclose(est_black, rslt.params[:,3], rtol=1e-02)
        np.testing.assert_allclose(se_black, rslt.bse[:,3], rtol=1e-02)
        np.testing.assert_allclose(t_black, rslt.tvalues[:,3], rtol=1e-02)
        np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-05)
        np.testing.assert_allclose(res, rslt.u, rtol=1e-04)
        np.testing.assert_allclose(std_res, rslt.std_res, rtol=1e-04)
        np.testing.assert_allclose(localR2, rslt.localR2, rtol=1e-05)
        np.testing.assert_allclose(inf, rslt.influ, rtol=1e-04)
        np.testing.assert_allclose(cooksD, rslt.cooksD, rtol=1e-00)
        
    def test_GS_NN(self):
        est_Int = self.GS_NN.by_col(' est_Intercept')
        se_Int = self.GS_NN.by_col(' se_Intercept')
        t_Int = self.GS_NN.by_col(' t_Intercept')
        est_rural = self.GS_NN.by_col(' est_PctRural')
        se_rural = self.GS_NN.by_col(' se_PctRural')
        t_rural = self.GS_NN.by_col(' t_PctRural')
        est_pov = self.GS_NN.by_col(' est_PctPov')
        se_pov = self.GS_NN.by_col(' se_PctPov')
        t_pov = self.GS_NN.by_col(' t_PctPov')
        est_black = self.GS_NN.by_col(' est_PctBlack')
        se_black = self.GS_NN.by_col(' se_PctBlack')
        t_black = self.GS_NN.by_col(' t_PctBlack')
        yhat = self.GS_NN.by_col(' yhat')
        res = np.array(self.GS_NN.by_col(' residual')).reshape((-1,1))
        std_res = np.array(self.GS_NN.by_col(' std_residual')).reshape((-1,1))
        localR2 = np.array(self.GS_NN.by_col(' localR2')).reshape((-1,1))
        inf = np.array(self.GS_NN.by_col(' influence')).reshape((-1,1))
        cooksD = np.array(self.GS_NN.by_col(' CooksD')).reshape((-1,1))

        model = GWR(self.coords, self.y, self.X, bw=49.000,
                kernel='gaussian', fixed=False)
        rslt = model.fit()
        
        np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-04)
        np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-04)
        np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-04)
        np.testing.assert_allclose(est_rural, rslt.params[:,1], rtol=1e-04)
        np.testing.assert_allclose(se_rural, rslt.bse[:,1], rtol=1e-04)
        np.testing.assert_allclose(t_rural, rslt.tvalues[:,1], rtol=1e-04)
        np.testing.assert_allclose(est_pov, rslt.params[:,2], rtol=1e-04)
        np.testing.assert_allclose(se_pov, rslt.bse[:,2], rtol=1e-04)
        np.testing.assert_allclose(t_pov, rslt.tvalues[:,2], rtol=1e-04)
        np.testing.assert_allclose(est_black, rslt.params[:,3], rtol=1e-02)
        np.testing.assert_allclose(se_black, rslt.bse[:,3], rtol=1e-02)
        np.testing.assert_allclose(t_black, rslt.tvalues[:,3], rtol=1e-02)
        np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-05)
        np.testing.assert_allclose(res, rslt.u, rtol=1e-04)
        np.testing.assert_allclose(std_res, rslt.std_res, rtol=1e-04)
        np.testing.assert_allclose(localR2, rslt.localR2, rtol=1e-05)
        np.testing.assert_allclose(inf, rslt.influ, rtol=1e-04)
        np.testing.assert_allclose(cooksD, rslt.cooksD, rtol=1e-00)
        
class TestGWRPoisson(unittest.TestCase):
    def setUp(self):
        os.chdir('/Users/toshan/dev/pysal/pysal/contrib/gwr/examples/tokyo')
        data = pysal.open('tokyo/tokyomortality.csv', mode='rU')
        self.coords = zip(data.by_col('X_CENTROID'), data.by_col('Y_CENTROID'))
        self.y = np.array(data.by_col('db2564')).reshape((-1,1))
        self.off = np.array(data.by_col('eb2564')).reshape((-1,1))
        OCC  = np.array(data.by_col('OCC_TEC')).reshape((-1,1))
        OWN = np.array(data.by_col('OWNH')).reshape((-1,1)) 
        POP = np.array(data.by_col('POP65')).reshape((-1,1))
        UNEMP = np.array(data.by_col('UNEMP')).reshape((-1,1))
        self.X = np.hstack([OCC,OWN,POP,UNEMP])
        self.BS_F = pysal.open('tokyo_results_no_off/tokyo_BS_F_listwise.csv')
        self.BS_NN = pysal.open('tokyo_results_no_off/tokyo_BS_NN_listwise.csv')
        self.GS_F = pysal.open('tokyo_results_no_off/tokyo_GS_F_listwise.csv')
        self.GS_NN = pysal.open('tokyo_results_no_off/tokyo_GS_NN_listwise.csv')

    def test_BS_F(self):
        est_Int = self.BS_F.by_col(' est_Intercept')
        se_Int = self.BS_F.by_col(' se_Intercept')
        t_Int = self.BS_F.by_col(' t_Intercept')
        est_OCC = self.BS_F.by_col(' est_OCC_TEC')
        se_OCC = self.BS_F.by_col(' se_OCC_TEC')
        t_OCC = self.BS_F.by_col(' t_OCC_TEC')
        est_OWN = self.BS_F.by_col(' est_OWNH')
        se_OWN = self.BS_F.by_col(' se_OWNH')
        t_OWN = self.BS_F.by_col(' t_OWNH')
        est_POP = self.BS_F.by_col(' est_POP65')
        se_POP = self.BS_F.by_col(' se_POP65')
        t_POP = self.BS_F.by_col(' t_POP65')
        est_UNEMP = self.BS_F.by_col(' est_UNEMP')
        se_UNEMP = self.BS_F.by_col(' se_UNEMP')
        t_UNEMP = self.BS_F.by_col(' t_UNEMP')
        yhat = self.BS_F.by_col(' yhat')
        pdev = self.BS_F.by_col(' localpdev')
        Ginf = self.BS_F.by_col(' Ginfluence')
        
        model = GWR(self.coords, self.y, self.X, bw=26029.625, family=Poisson(), 
                kernel='bisquare', fixed=True)
        rslt = model.fit()

        np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-05)
        np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-07)
        np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-07)
        np.testing.assert_allclose(est_OCC, rslt.params[:,1], rtol=1e-04)
        #np.testing.assert_allclose(se_OCC, rslt.bse[:,1], rtol=1e-07)
        #np.testing.assert_allclose(t_OCC, rslt.tvalues[:,1], rtol=1e-07)
        np.testing.assert_allclose(est_OWN, rslt.params[:,2], rtol=1e-04)
        #np.testing.assert_allclose(se_OWN, rslt.bse[:,2], rtol=1e-07)
        #np.testing.assert_allclose(t_OWN, rslt.tvalues[:,2], rtol=1e-07)
        np.testing.assert_allclose(est_POP, rslt.params[:,3], rtol=1e-04)
        #np.testing.assert_allclose(se_POP, rslt.bse[:,3], rtol=1e-07)
        #np.testing.assert_allclose(t_POP, rslt.tvalues[:,3], rtol=1e-07)
        np.testing.assert_allclose(est_UNEMP, rslt.params[:,4], rtol=1e-04)
        #np.testing.assert_allclose(se_UNEMP, rslt.bse[:,4], rtol=1e-02)
        #np.testing.assert_allclose(t_UNEMP, rslt.tvalues[:,4], rtol=1e-07)
        np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-05)
        #np.testing.assert_allclose(pdev, rslt.localR2, rtol=1e-05)


    def test_BS_NN(self):
        est_Int = self.BS_NN.by_col(' est_Intercept')
        se_Int = self.BS_NN.by_col(' se_Intercept')
        t_Int = self.BS_NN.by_col(' t_Intercept')
        est_OCC = self.BS_NN.by_col(' est_OCC_TEC')
        se_OCC = self.BS_NN.by_col(' se_OCC_TEC')
        t_OCC = self.BS_NN.by_col(' t_OCC_TEC')
        est_OWN = self.BS_NN.by_col(' est_OWNH')
        se_OWN = self.BS_NN.by_col(' se_OWNH')
        t_OWN = self.BS_NN.by_col(' t_OWNH')
        est_POP = self.BS_NN.by_col(' est_POP65')
        se_POP = self.BS_NN.by_col(' se_POP65')
        t_POP = self.BS_NN.by_col(' t_POP65')
        est_UNEMP = self.BS_NN.by_col(' est_UNEMP')
        se_UNEMP = self.BS_NN.by_col(' se_UNEMP')
        t_UNEMP = self.BS_NN.by_col(' t_UNEMP')
        yhat = self.BS_NN.by_col(' yhat')
        pdev = self.BS_NN.by_col(' localpdev')
        Ginf = self.BS_NN.by_col(' Ginfluence')

        #model = GWR(self.coords, self.y, self.X, bw=50, family=Poisson(), 
                #kernel='bisquare', fixed=False)
        #rslt = model.fit()
        
        #np.testing.assert_allclose(est_Int, rslt.params[:,0], rtol=1e-07)
        #np.testing.assert_allclose(se_Int, rslt.bse[:,0], rtol=1e-07)
        #np.testing.assert_allclose(t_Int, rslt.tvalues[:,0], rtol=1e-07)
        #np.testing.assert_allclose(est_OCC, rslt.params[:,1], rtol=1e-07)
        #np.testing.assert_allclose(se_OCC, rslt.bse[:,1], rtol=1e-07)
        #np.testing.assert_allclose(t_OCC, rslt.tvalues[:,1], rtol=1e-07)
        #np.testing.assert_allclose(est_OWN, rslt.params[:,2], rtol=1e-07)
        #np.testing.assert_allclose(se_OWN, rslt.bse[:,2], rtol=1e-07)
        #np.testing.assert_allclose(t_OWN, rslt.tvalues[:,2], rtol=1e-07)
        #np.testing.assert_allclose(est_POP, rslt.params[:,3], rtol=1e-07)
        #np.testing.assert_allclose(se_POP, rslt.bse[:,3], rtol=1e-07)
        #np.testing.assert_allclose(t_POP, rslt.tvalues[:,3], rtol=1e-07)
        #np.testing.assert_allclose(est_UNEMP, rslt.params[:,4], rtol=1e-07)
        #np.testing.assert_allclose(se_UNEMP, rslt.bse[:,4], rtol=1e-02)
        #np.testing.assert_allclose(t_UNEMP, rslt.tvalues[:,4], rtol=1e-07)
        #np.testing.assert_allclose(yhat, rslt.mu, rtol=1e-07)
        #np.testing.assert_allclose(res, rslt.u, rtol=1e-07)
        #np.testing.assert_allclose(std_res, rslt.std_res, rtol=1e-07)
        #np.testing.assert_allclose(pdev, rslt.localR2, rtol=1e-07)

    def test_GS_F(self):
        est_Int = self.GS_F.by_col(' est_Intercept')
        se_Int = self.GS_F.by_col(' se_Intercept')
        t_Int = self.GS_F.by_col(' t_Intercept')
        est_OCC = self.GS_F.by_col(' est_OCC_TEC')
        se_OCC = self.GS_F.by_col(' se_OCC_TEC')
        t_OCC = self.GS_F.by_col(' t_OCC_TEC')
        est_OWN = self.GS_F.by_col(' est_OWNH')
        se_OWN = self.GS_F.by_col(' se_OWNH')
        t_OWN = self.GS_F.by_col(' t_OWNH')
        est_POP = self.GS_F.by_col(' est_POP65')
        se_POP = self.GS_F.by_col(' se_POP65')
        t_POP = self.GS_F.by_col(' t_POP65')
        est_UNEMP = self.GS_F.by_col(' est_UNEMP')
        se_UNEMP = self.GS_F.by_col(' se_UNEMP')
        t_UNEMP = self.GS_F.by_col(' t_UNEMP')
        yhat = self.GS_F.by_col(' yhat')
        pdev = self.GS_F.by_col(' localpdev')
        Ginf = self.GS_F.by_col(' Ginfluence')

    def test_GS_NN(self):
        est_Int = self.GS_NN.by_col(' est_Intercept')
        se_Int = self.GS_NN.by_col(' se_Intercept')
        t_Int = self.GS_NN.by_col(' t_Intercept')
        est_OCC = self.GS_NN.by_col(' est_OCC_TEC')
        se_OCC = self.GS_NN.by_col(' se_OCC_TEC')
        t_OCC = self.GS_NN.by_col(' t_OCC_TEC')
        est_OWN = self.GS_NN.by_col(' est_OWNH')
        se_OWN = self.GS_NN.by_col(' se_OWNH')
        t_OWN = self.GS_NN.by_col(' t_OWNH')
        est_POP = self.GS_NN.by_col(' est_POP65')
        se_POP = self.GS_NN.by_col(' se_POP65')
        t_POP = self.GS_NN.by_col(' t_POP65')
        est_UNEMP = self.GS_NN.by_col(' est_UNEMP')
        se_UNEMP = self.GS_NN.by_col(' se_UNEMP')
        t_UNEMP = self.GS_NN.by_col(' t_UNEMP')
        yhat = self.GS_NN.by_col(' yhat')
        pdev = self.GS_NN.by_col(' localpdev')
        Ginf = self.GS_NN.by_col(' Ginfluence')

class TestGWRBinomial(unittest.TestCase):
    def setUp(self):
        os.chdir('/Users/toshan/dev/pysal/pysal/contrib/gwr/examples/clearwater')
        self.data = pysal.open('clearwater/landslides.csv')
        #self.coords = zip(data.by_col('X_CENTROID'), data.by_col('X_CENTROID'))
        #self.y = np.array(data.by_col('db2564')).reshape((-1,1))
        #self.off = np.array(data.by_col('eb2564')).reshape((-1,1))
        #OCC  = np.array(data.by_col('OCC_TEC')).reshape((-1,1))
        #OWN = np.array(data.by_col('OWNH')).reshape((-1,1)) 
        #POP = np.array(data.by_col('POP65')).reshape((-1,1))
        #UNEMP = np.array(data.by_col('UNEMP')).reshape((-1,1))
        #self.X = np.hstack([OCC,OWN,POP,UNEMP])

        self.BS_F = pysal.open('clearwater_results/clearwater_BS_F_listwise.csv')
        self.BS_NN = pysal.open('clearwater_results/clearwater_BS_NN_listwise.csv')
        self.GS_F = pysal.open('clearwater_results/clearwater_GS_F_listwise.csv')
        self.GS_NN = pysal.open('clearwater_results/clearwater_GS_NN_listwise.csv')

    def test_BS_F(self):
        est_Int = self.BS_F.by_col(' est_Intercept')
        se_Int = self.BS_F.by_col(' se_Intercept')
        t_Int = self.BS_F.by_col(' t_Intercept')
        est_elev = self.BS_F.by_col(' est_Elev')
        se_elev = self.BS_F.by_col(' se_Elev')
        t_elev = self.BS_F.by_col(' t_Elev')
        est_slope = self.BS_F.by_col(' est_Slope')
        se_slope = self.BS_F.by_col(' se_Slope')
        t_slope = self.BS_F.by_col(' t_Slope')
        est_sin = self.BS_F.by_col(' est_SinAspct')
        se_sin = self.BS_F.by_col(' se_SinAspct')
        t_sin = self.BS_F.by_col(' t_SinAspct')
        est_cos = self.BS_F.by_col(' est_CosAspct')
        se_cos = self.BS_F.by_col(' se_CosAspct')
        t_cos = self.BS_F.by_col(' t_CosAspct')
        est_south = self.BS_F.by_col(' est_AbsSouth')
        se_south = self.BS_F.by_col(' se_AbsSouth')
        t_south = self.BS_F.by_col(' t_AbsSouth')
        est_strm = self.BS_F.by_col(' est_DistStrm')
        se_strm = self.BS_F.by_col(' se_DistStrm')
        t_strm = self.BS_F.by_col(' t_DistStrm') 
        yhat = self.BS_F.by_col(' yhat')
        pdev = self.BS_F.by_col(' localpdev')
        Ginf = self.BS_F.by_col(' Ginfluence')

    def test_BS_NN(self):
        est_Int = self.BS_NN.by_col(' est_Intercept')
        se_Int = self.BS_NN.by_col(' se_Intercept')
        t_Int = self.BS_NN.by_col(' t_Intercept')
        est_elev = self.BS_NN.by_col(' est_Elev')
        se_elev = self.BS_NN.by_col(' se_Elev')
        t_elev = self.BS_NN.by_col(' t_Elev')
        est_slope = self.BS_NN.by_col(' est_Slope')
        se_slope = self.BS_NN.by_col(' se_Slope')
        t_slope = self.BS_NN.by_col(' t_Slope')
        est_sin = self.BS_NN.by_col(' est_SinAspct')
        se_sin = self.BS_NN.by_col(' se_SinAspct')
        t_sin = self.BS_NN.by_col(' t_SinAspct')
        est_cos = self.BS_NN.by_col(' est_CosAspct')
        se_cos = self.BS_NN.by_col(' se_CosAspct')
        t_cos = self.BS_NN.by_col(' t_CosAspct')
        est_south = self.BS_NN.by_col(' est_AbsSouth')
        se_south = self.BS_NN.by_col(' se_AbsSouth')
        t_south = self.BS_NN.by_col(' t_AbsSouth')
        est_strm = self.BS_NN.by_col(' est_DistStrm')
        se_strm = self.BS_NN.by_col(' se_DistStrm')
        t_strm = self.BS_NN.by_col(' t_DistStrm') 
        yhat = self.BS_NN.by_col(' yhat')
        pdev = self.BS_NN.by_col(' localpdev')
        Ginf = self.BS_NN.by_col(' Ginfluence')

    def test_GS_F(self):
        est_Int = self.GS_F.by_col(' est_Intercept')
        se_Int = self.GS_F.by_col(' se_Intercept')
        t_Int = self.GS_F.by_col(' t_Intercept')
        est_elev = self.GS_F.by_col(' est_Elev')
        se_elev = self.GS_F.by_col(' se_Elev')
        t_elev = self.GS_F.by_col(' t_Elev')
        est_slope = self.GS_F.by_col(' est_Slope')
        se_slope = self.GS_F.by_col(' se_Slope')
        t_slope = self.GS_F.by_col(' t_Slope')
        est_sin = self.GS_F.by_col(' est_SinAspct')
        se_sin = self.GS_F.by_col(' se_SinAspct')
        t_sin = self.GS_F.by_col(' t_SinAspct')
        est_cos = self.GS_F.by_col(' est_CosAspct')
        se_cos = self.GS_F.by_col(' se_CosAspct')
        t_cos = self.GS_F.by_col(' t_CosAspct')
        est_south = self.GS_F.by_col(' est_AbsSouth')
        se_south = self.GS_F.by_col(' se_AbsSouth')
        t_south = self.GS_F.by_col(' t_AbsSouth')
        est_strm = self.GS_F.by_col(' est_DistStrm')
        se_strm = self.GS_F.by_col(' se_DistStrm')
        t_strm = self.GS_F.by_col(' t_DistStrm') 
        yhat = self.GS_F.by_col(' yhat')
        pdev = self.GS_F.by_col(' localpdev')
        Ginf = self.GS_F.by_col(' Ginfluence')

    def test_GS_NN(self):
        est_Int = self.GS_NN.by_col(' est_Intercept')
        se_Int = self.GS_NN.by_col(' se_Intercept')
        t_Int = self.GS_NN.by_col(' t_Intercept')
        est_elev = self.GS_NN.by_col(' est_Elev')
        se_elev = self.GS_NN.by_col(' se_Elev')
        t_elev = self.GS_NN.by_col(' t_Elev')
        est_slope = self.GS_NN.by_col(' est_Slope')
        se_slope = self.GS_NN.by_col(' se_Slope')
        t_slope = self.GS_NN.by_col(' t_Slope')
        est_sin = self.GS_NN.by_col(' est_SinAspct')
        se_sin = self.GS_NN.by_col(' se_SinAspct')
        t_sin = self.GS_NN.by_col(' t_SinAspct')
        est_cos = self.GS_NN.by_col(' est_CosAspct')
        se_cos = self.GS_NN.by_col(' se_CosAspct')
        t_cos = self.GS_NN.by_col(' t_CosAspct')
        est_south = self.GS_NN.by_col(' est_AbsSouth')
        se_south = self.GS_NN.by_col(' se_AbsSouth')
        t_south = self.GS_NN.by_col(' t_AbsSouth')
        est_strm = self.GS_NN.by_col(' est_DistStrm')
        se_strm = self.GS_NN.by_col(' se_DistStrm')
        t_strm = self.GS_NN.by_col(' t_DistStrm') 
        yhat = self.GS_NN.by_col(' yhat')
        pdev = self.GS_NN.by_col(' localpdev')
        Ginf = self.GS_NN.by_col(' Ginfluence')

if __name__ == '__main__':
	unittest.main()
